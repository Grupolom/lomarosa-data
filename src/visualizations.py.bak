"""
M√≥dulo de Visualizaciones - Dashboard Inventario Lomarosa
Este m√≥dulo genera todos los gr√°ficos interactivos con Plotly
"""

import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import pandas as pd
import config


class DashboardVisualizations:
    """Clase para generar visualizaciones del dashboard"""
    
    def __init__(self, data_processor):
        """
        Inicializa el generador de visualizaciones
        
        Args:
            data_processor: Instancia de DataProcessor con datos procesados
        """
        self.processor = data_processor
        self.df = data_processor.df_processed
        self.stats = data_processor.get_statistics()
        
    def create_kpi_cards(self):
        """Crea las tarjetas de KPIs principales"""
        stats = self.stats
        
        # Crear figura con subplots para KPIs
        fig = make_subplots(
            rows=1, cols=4,
            subplot_titles=("Total Productos", "Disponibles", "Sin Stock", "Stock Total (Kg)"),
            specs=[[{"type": "indicator"}, {"type": "indicator"}, 
                    {"type": "indicator"}, {"type": "indicator"}]]
        )
        
        # KPI 1: Total de productos
        fig.add_trace(go.Indicator(
            mode="number",
            value=stats['total_productos'],
            number={'font': {'size': 50, 'color': config.COLOR_PRIMARY}},
        ), row=1, col=1)
        
        # KPI 2: Productos disponibles
        fig.add_trace(go.Indicator(
            mode="number+delta",
            value=stats['productos_disponibles'],
            delta={'reference': stats['total_productos'], 'relative': False},
            number={'font': {'size': 50, 'color': config.COLOR_SUCCESS}},
        ), row=1, col=2)
        
        # KPI 3: Sin stock
        fig.add_trace(go.Indicator(
            mode="number",
            value=stats['productos_sin_stock'],
            number={'font': {'size': 50, 'color': config.COLOR_DANGER}},
        ), row=1, col=3)
        
        # KPI 4: Stock total en kilos
        fig.add_trace(go.Indicator(
            mode="number",
            value=round(stats['stock_total_kilos'], 2),
            number={'font': {'size': 50, 'color': config.COLOR_INFO}, 'suffix': ' Kg'},
        ), row=1, col=4)
        
        fig.update_layout(
            height=200,
            margin=dict(l=20, r=20, t=60, b=20),
            paper_bgcolor='rgba(0,0,0,0)',
            plot_bgcolor='rgba(0,0,0,0)',
        )
        
        return fig
    
    def create_availability_pie(self):
        """Crea gr√°fico de disponibilidad (pie chart)"""
        disponibles = self.stats['productos_disponibles']
        sin_stock = self.stats['productos_sin_stock']
        
        fig = go.Figure(data=[go.Pie(
            labels=['Disponibles', 'Sin Stock'],
            values=[disponibles, sin_stock],
            hole=0.4,
            marker=dict(colors=[config.COLOR_SUCCESS, config.COLOR_DANGER]),
            textinfo='label+percent+value',
            textfont=dict(size=14)
        )])
        
        fig.update_layout(
            title={
                'text': 'Disponibilidad de Productos',
                'x': 0,  # Alineado a la izquierda
                'xanchor': 'left',
                'font': {'size': 20, 'color': '#333'}
            },
            height=400,
            showlegend=True,
            legend=dict(orientation="h", yanchor="bottom", y=-0.15, xanchor="left", x=0),  # Leyenda alineada a la izquierda
            margin=dict(l=20, r=20, t=60, b=60)
        )
        
        return fig
    
    def create_category_bar_chart(self):
        """Crea gr√°fico de barras por categor√≠a de producto"""
        category_data = self.processor.get_data_by_category()
        
        if category_data is None or len(category_data) == 0:
            return None
        
        fig = go.Figure()
        
        fig.add_trace(go.Bar(
            x=category_data['categoria_producto'],
            y=category_data['stock_total'],
            text=category_data['stock_total'].round(2),
            textposition='outside',
            marker=dict(
                color=category_data['stock_total'],
                colorscale='Blues',
                showscale=False
            ),
            hovertemplate='<b>%{x}</b><br>Stock Total: %{y:.2f} Kg<br><extra></extra>'
        ))
        
        fig.update_layout(
            title={
                'text': 'Stock Total por Categor√≠a de Producto',
                'x': 0.5,
                'xanchor': 'center',
                'font': {'size': 20, 'color': '#333'}
            },
            xaxis_title='Categor√≠a',
            yaxis_title='Stock (Kg)',
            height=450,
            showlegend=False,
            hovermode='x',
            margin=dict(l=60, r=20, t=80, b=80),
            plot_bgcolor='rgba(240,240,240,0.5)',
            paper_bgcolor='white'
        )
        
        fig.update_xaxes(showgrid=False, tickangle=-45)
        fig.update_yaxes(showgrid=True, gridcolor='lightgray')

        
        return fig
    
    def _create_error_chart(self, message):
        """Crea un gr√°fico con mensaje de error"""
        fig = go.Figure()
        
        fig.add_annotation(
            text=message,
            xref="paper", yref="paper",
            x=0.5, y=0.5,
            showarrow=False,
            font=dict(size=14, color="red")
        )
        
        fig.update_layout(
            height=400,
            showlegend=False,
            margin=dict(l=20, r=20, t=60, b=20)
        )
        
        return fig

    def create_stock_status_chart(self):
        """Crea gr√°fico de los 5 productos con mayor diferencia vs su promedio hist√≥rico"""
        if self.df is None:
            print("‚ùå Error: No hay datos cargados")
            return self._create_error_chart("No hay datos disponibles")
            
        try:
            print("\nüìä Generando gr√°fico de comparaci√≥n...")
            df = self.df.copy()
            
            if self.processor.product_averages is not None and len(self.processor.product_averages) > 0:
                print("ÔøΩ Usando promedios hist√≥ricos de 'Kg totales2'")
                
                # Crear DataFrame con stock actual y promedio hist√≥rico
                comparison = pd.DataFrame({
                    'Stock_Actual': df.set_index(config.COL_PRODUCTO)[config.COL_TOTAL],
                    'Promedio_Historico': self.processor.product_averages
                }).dropna()
                
                print(f"\nProductos con datos para comparar: {len(comparison)}")
                
                # Calcular diferencia absoluta
                comparison['diferencia_promedio'] = abs(
                    comparison['Stock_Actual'] - comparison['Promedio_Historico']
                )
                
                # Obtener los 5 productos con mayor diferencia
                top_diff = comparison.nlargest(5, 'diferencia_promedio')
                
                print("\nTop 5 mayores diferencias:")
                for prod in top_diff.index:
                    print(f"{prod}: Actual={top_diff.loc[prod, 'Stock_Actual']:.2f}, "
                          f"Promedio={top_diff.loc[prod, 'Promedio_Historico']:.2f}, "
                          f"Dif={top_diff.loc[prod, 'diferencia_promedio']:.2f}")
                
                # Preparar datos para el gr√°fico
                df_plot = pd.DataFrame({
                    'Producto': top_diff.index,
                    'Stock_Actual': top_diff['Stock_Actual'],
                    'Promedio_Historico': top_diff['Promedio_Historico']
                })
                
                # Crear el gr√°fico
                fig = go.Figure()
                
                # Agregar barras para el stock actual
                fig.add_trace(go.Bar(
                    name='Stock Actual',
                    y=df_plot['Producto'],
                    x=df_plot['Stock_Actual'],
                    orientation='h',
                    marker=dict(color=config.COLOR_PRIMARY),
                    text=df_plot['Stock_Actual'].round(2),
                    textposition='outside',
                    hovertemplate='<b>%{y}</b><br>Stock Actual: %{x:.2f} Kg<br><extra></extra>'
                ))
                
                # Agregar barras para el promedio hist√≥rico
                fig.add_trace(go.Bar(
                    name='Promedio Hist√≥rico',
                    y=df_plot['Producto'],
                    x=df_plot['Promedio_Historico'],
                    orientation='h',
                    marker=dict(color=config.COLOR_INFO, opacity=0.5),
                    text=df_plot['Promedio_Historico'].round(2),
                    textposition='outside',
                    hovertemplate='<b>%{y}</b><br>Promedio Hist√≥rico: %{x:.2f} Kg<br><extra></extra>'
                ))
                
                title_text = 'Top 5 Productos con Mayor Diferencia vs Promedio Hist√≥rico'
            
            if len(df) == 0:
                return self._create_error_chart("No hay datos suficientes para comparar")
            
            # Obtener los 5 productos con mayor diferencia
            top_diff = df.nlargest(5, 'diferencia_promedio')
            
            # Crear el gr√°fico
            fig = go.Figure()
            
            # Agregar barras para el stock actual
            fig.add_trace(go.Bar(
                name='Stock Actual',
                y=top_diff[config.COL_PRODUCTO],
                x=top_diff[config.COL_TOTAL],
                orientation='h',
                marker=dict(color=config.COLOR_PRIMARY),
                text=top_diff[config.COL_TOTAL].round(2),
                textposition='outside',
                hovertemplate='<b>%{y}</b><br>Stock Actual: %{x:.2f} Kg<br><extra></extra>'
            ))
            
            # Agregar barras para el promedio
            fig.add_trace(go.Bar(
                name='Promedio Hist√≥rico',
                y=top_diff[config.COL_PRODUCTO],
                x=top_diff[f'{config.COL_TOTAL}_promedio'],
                orientation='h',
                marker=dict(color=config.COLOR_INFO, opacity=0.5),
                text=top_diff[f'{config.COL_TOTAL}_promedio'].round(2),
                textposition='outside',
                hovertemplate='<b>%{y}</b><br>Promedio: %{x:.2f} Kg<br><extra></extra>'
            ))
            
                fig.update_layout(
                    title={
                        'text': title_text,
                        'x': 0,
                        'xanchor': 'left',
                        'font': {'size': 20, 'color': '#333'}
                    },
                    xaxis_title='Stock (Kg)',
                    yaxis_title='',
                    height=400,
                    showlegend=True,
                    legend=dict(
                        orientation="h",
                        yanchor="bottom",
                        y=1.02,
                        xanchor="right",
                        x=1
                    ),
                    margin=dict(l=200, r=60, t=80, b=60),
                    plot_bgcolor='rgba(240,240,240,0.5)',
                    paper_bgcolor='white',
                    barmode='group'
                )
                
                fig.update_xaxes(showgrid=True, gridcolor='lightgray')
                fig.update_yaxes(showgrid=False)
                
                return fig
                
            print("‚ö†Ô∏è No hay datos hist√≥ricos disponibles")
            return self._create_error_chart("No hay datos hist√≥ricos disponibles para comparar")
            
        except Exception as e:
            print(f"‚ùå Error al crear gr√°fico: {str(e)}")
            import traceback
            traceback.print_exc()
            return self._create_error_chart(f"Error al crear gr√°fico: {str(e)}")
            
        except Exception as e:
            print(f"‚ùå Error al crear gr√°fico: {str(e)}")
            return self._create_error_chart(f"Error al crear gr√°fico: {str(e)}")
            
        df = self.df.copy()
        
        # Unir con promedios hist√≥ricos
        df = df.merge(
            self.processor.product_averages.reset_index(),
            on=config.COL_PRODUCTO,
            how='left',
            suffixes=('_actual', '_promedio')
        )
        
        # Calcular diferencia con el promedio hist√≥rico
        df['diferencia_promedio'] = abs(df[f'{config.COL_TOTAL}_actual'] - df[f'{config.COL_TOTAL}_promedio'])
        
        # Obtener los 5 productos con mayor diferencia
        top_diff = df.nlargest(5, 'diferencia_promedio')
        
        # Crear el gr√°fico
        fig = go.Figure()
        
        # Agregar barras para el stock actual
        fig.add_trace(go.Bar(
            name='Stock Actual',
            y=top_diff[config.COL_PRODUCTO],
            x=top_diff[f'{config.COL_TOTAL}_actual'],
            orientation='h',
            marker=dict(color=config.COLOR_PRIMARY),
            text=top_diff[f'{config.COL_TOTAL}_actual'].round(2),
            textposition='outside',
            hovertemplate='<b>%{y}</b><br>Stock Actual: %{x:.2f} Kg<br><extra></extra>'
        ))
        
        # Agregar barras para el promedio
        fig.add_trace(go.Bar(
            name='Promedio Semanal',
            y=top_diff[config.COL_PRODUCTO],
            x=top_diff[f'{config.COL_TOTAL}_promedio'],
            orientation='h',
            marker=dict(color=config.COLOR_INFO, opacity=0.5),
            text=top_diff[f'{config.COL_TOTAL}_promedio'].round(2),
            textposition='outside',
            hovertemplate='<b>%{y}</b><br>Promedio: %{x:.2f} Kg<br><extra></extra>'
        ))
        
        fig.update_layout(
            title={
                'text': 'Top 5 Productos con Mayor Diferencia vs Promedio Semanal',
                'x': 0,
                'xanchor': 'left',
                'font': {'size': 20, 'color': '#333'}
            },
            xaxis_title='Stock (Kg)',
            yaxis_title='',
            height=400,
            showlegend=True,
            legend=dict(
                orientation="h",
                yanchor="bottom",
                y=1.02,
                xanchor="right",
                x=1
            ),
            margin=dict(l=200, r=60, t=80, b=60),
            plot_bgcolor='rgba(240,240,240,0.5)',
            paper_bgcolor='white',
            barmode='group'
        )
        
        fig.update_xaxes(showgrid=True, gridcolor='lightgray')
        fig.update_yaxes(showgrid=False)
        
        return fig
        
        # Crear el gr√°fico
        fig = go.Figure()
        
        # Agregar barras para el stock actual
        fig.add_trace(go.Bar(
            name='Stock Actual',
            y=top_diff[config.COL_PRODUCTO],
            x=top_diff[config.COL_TOTAL],
            orientation='h',
            marker=dict(color=config.COLOR_PRIMARY),
            text=top_diff[config.COL_TOTAL].round(2),
            textposition='outside',
            hovertemplate='<b>%{y}</b><br>Stock: %{x:.2f} Kg<br><extra></extra>'
        ))
        
        # Agregar l√≠nea del promedio
        for i in range(len(top_diff)):
            fig.add_shape(
                type="line",
                x0=promedio,
                x1=promedio,
                y0=i-0.4,
                y1=i+0.4,
                line=dict(color="red", width=2, dash="dash"),
            )
        
        fig.update_layout(
            title={
                'text': 'Top 5 Productos con Mayor Diferencia vs Promedio',
                'x': 0,
                'xanchor': 'left',
                'font': {'size': 20, 'color': '#333'}
            },
            xaxis_title='Stock (Kg)',
            yaxis_title='',
            height=400,
            showlegend=True,
            margin=dict(l=200, r=60, t=80, b=60),
            plot_bgcolor='rgba(240,240,240,0.5)',
            paper_bgcolor='white'
        )
        
        # Agregar anotaci√≥n para el promedio
        fig.add_annotation(
            x=promedio,
            y=len(top_diff),
            text=f'Promedio: {promedio:.2f} Kg',
            showarrow=True,
            arrowhead=1,
            ax=0,
            ay=-40
        )
        
        fig.update_xaxes(showgrid=True, gridcolor='lightgray')
        fig.update_yaxes(showgrid=False)
        
        return fig
    
    def create_top_products_chart(self, n=10):
        """Crea gr√°fico de productos con mayor stock"""
        top_products = self.processor.get_top_products(n)
        
        if top_products is None or len(top_products) == 0:
            return None
        
        fig = go.Figure()
        
        fig.add_trace(go.Bar(
            y=top_products[config.COL_PRODUCTO],
            x=top_products[config.COL_TOTAL],
            orientation='h',
            text=top_products[config.COL_TOTAL].round(2),
            textposition='outside',
            marker=dict(color=config.COLOR_INFO),
            hovertemplate='<b>%{y}</b><br>Stock: %{x:.2f} Kg<br><extra></extra>'
        ))
        
        fig.update_layout(
            title={
                'text': f'Top {n} Productos con Mayor Stock',
                'x': 0.5,
                'xanchor': 'center',
                'font': {'size': 20, 'color': '#333'}
            },
            xaxis_title='Stock (Kg)',
            yaxis_title='',
            height=max(400, n * 40),
            showlegend=False,
            margin=dict(l=200, r=60, t=80, b=60),
            plot_bgcolor='rgba(240,240,240,0.5)',
            paper_bgcolor='white'
        )
        
        fig.update_xaxes(showgrid=True, gridcolor='lightgray')
        fig.update_yaxes(showgrid=False)


        
        return fig
    
    def create_critical_products_table(self):
        """Crea tabla HTML de productos cr√≠ticos"""
        critical = self.processor.get_critical_products()
        
        if critical is None or len(critical) == 0:
            return "<p style='text-align:center; color:#2ca02c; font-size:18px;'>‚úÖ No hay productos cr√≠ticos en este momento</p>"
        
        # Crear tabla HTML con estilos
        html = """
        <div style='overflow-x:auto; margin: 20px 0;'>
            <table style='width:100%; border-collapse: collapse; box-shadow: 0 2px 4px rgba(0,0,0,0.1);'>
                <thead>
                    <tr style='background-color: #d62728; color: white;'>
                        <th style='padding: 12px; text-align: left; border: 1px solid #ddd;'>C√≥digo</th>
                        <th style='padding: 12px; text-align: left; border: 1px solid #ddd;'>Producto</th>
                        <th style='padding: 12px; text-align: right; border: 1px solid #ddd;'>Stock (Kg)</th>
                        <th style='padding: 12px; text-align: center; border: 1px solid #ddd;'>Estado</th>
                    </tr>
                </thead>
                <tbody>
        """
        
        for idx, row in critical.iterrows():
            bg_color = '#ffe6e6' if row['categoria_stock'] == 'Sin Stock' else '#fff4e6'
            html += f"""
                    <tr style='background-color: {bg_color};'>
                        <td style='padding: 10px; border: 1px solid #ddd;'>{row[config.COL_CODIGO]}</td>
                        <td style='padding: 10px; border: 1px solid #ddd;'>{row[config.COL_PRODUCTO]}</td>
                        <td style='padding: 10px; text-align: right; border: 1px solid #ddd;'>{row[config.COL_TOTAL]:.2f}</td>
                        <td style='padding: 10px; text-align: center; border: 1px solid #ddd;'>
                            <span style='padding: 4px 8px; border-radius: 4px; background-color: {"#d62728" if row["categoria_stock"] == "Sin Stock" else "#ff7f0e"}; color: white; font-weight: bold;'>
                                {row['categoria_stock']}
                            </span>
                        </td>
                    </tr>
            """
        
        html += """
                </tbody>
            </table>
        </div>
        """
        
        return html


if __name__ == "__main__":
    print("‚úÖ M√≥dulo de visualizaciones listo")
